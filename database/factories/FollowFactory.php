<?php

namespace Database\Factories;

use App\Enums\FollowStatusEnum;
use App\Models\Follow;
use App\Models\User;
use App\Models\Team;
use App\Models\Court;
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\DB;

class FollowFactory extends Factory
{
    protected $model = Follow::class;

    /**
     * Static property to store combinations already generated in this seeding run.
     * This helps prevent duplicate generation across multiple factory instances
     * within a single `php artisan db:seed` command.
     *
     * @var array<string, bool>
     */
    protected static $generatedCombinations = [];

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     * @throws \Exception
     */
    public function definition(): array
    {
        $maxAttempts = 100; // Increased attempts to find a unique combination
        $attempt = 0;
        $uniqueCombinationFound = false;
        $userId = null;
        $followableId = null;
        $followableType = null;

        // Loop until a unique combination is found or max attempts are reached
        while (!$uniqueCombinationFound && $attempt < $maxAttempts) {
            $attempt++;

            // 1. Select a random user to be the follower
            $userId = User::inRandomOrder()->value('id');
            if (!$userId) {
                throw new \Exception('No users found in the database. Please seed the users table first.');
            }

            // 2. Randomly determine the type of entity to follow (Team, Court, or User)
            $followableType = $this->faker->randomElement([Team::class, Court::class, User::class]);
            $followableId = null;

            // 3. Select a random ID for the followable entity based on its type
            switch ($followableType) {
                case Team::class:
                    $followableId = Team::inRandomOrder()->value('id');
                    if (!$followableId) {
                        throw new \Exception('No teams found in the database. Please seed the teams table first.');
                    }
                    break;
                case Court::class:
                    $followableId = Court::inRandomOrder()->value('id');
                    if (!$followableId) {
                        throw new \Exception('No courts found in the database. Please seed the courts table first.');
                    }
                    break;
                case User::class:
                    // Ensure a user doesn't follow themselves
                    do {
                        $followableId = User::inRandomOrder()->value('id');
                    } while ($followableId === $userId || !$followableId);
                    if (!$followableId) {
                        // This case should ideally not happen if there are at least two users
                        throw new \Exception('Could not find a unique user to follow. Ensure more than one user exists.');
                    }
                    break;
            }

            // 4. Create a unique key for the generated combination
            // This key is used to check against previously generated combinations in this factory run.
            $combinationKey = implode('-', [$userId, $followableId, $followableType]);

            // 5. Check for uniqueness:
            //    a) Has this exact combination already been generated by *this factory* in the current seeding session?
            //    b) Does this exact combination already exist in the *database*?
            if (!isset(self::$generatedCombinations[$combinationKey]) &&
                !Follow::where([
                    'user_id' => $userId,
                    'followable_id' => $followableId,
                    'followable_type' => $followableType,
                ])->exists()) {
                $uniqueCombinationFound = true;
                // Mark this combination as generated to prevent future duplicates in this run
                self::$generatedCombinations[$combinationKey] = true;
            }
        }

        // If after max attempts, a unique combination couldn't be found, throw an exception
        if (!$uniqueCombinationFound) {
            throw new \Exception(
                'Could not find a unique follow combination after ' . $maxAttempts . ' attempts. ' .
                'This might indicate a lack of unique data in your users, teams, or courts tables, ' .
                'or that you are trying to seed more unique follows than available combinations. ' .
                'Consider increasing $maxAttempts or ensuring enough unique data exists.'
            );
        }

        // Return the definition array for the unique follow record
        return [
            'user_id' => $userId,
            'followable_id' => $followableId,
            'followable_type' => $followableType,
            'status' => $this->faker->randomElement([
                FollowStatusEnum::PENDING->value,
                FollowStatusEnum::ACCEPTED->value,
            ]),
        ];
    }
}
