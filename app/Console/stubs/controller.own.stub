<?php

namespace $namespace$;

use App\Http\Controllers\Controller;
use App\Http\Requests\$name$Request;
use App\Services\$service$;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;

class $class_name$ extends Controller
{
    private $service$ $$variable$;

    /**
     * Service interface tanımlanıyor.
     *
     * @param  $service$ $$variable$
     * @return void
     */
    public function __construct($service$ $$variable$)
    {
        $this->$variable$ = $$variable$;
    }

    /**
     * Kaynakları listelemek için kullanılır.
     *
     * @param  Request  $request
     * @return \Illuminate\View\View
     */
    public function index(Request $request) : View
    {
        $items = $this->$variable$->all($request);
        return view('$name$s.index', compact('items'));
    }

    /**
     * Yeni bir kaynağın formunu görüntülemek için kullanılır.
     *
     * @return \Illuminate\View\View
     */
    public function create() : View
    {
        return view('$name$s.create');
    }

    /**
     * Yeni bir kaynağı kaydetmek için kullanılır.
     *
     * @param  $name$Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store($name$Request $request) : RedirectResponse
    {
        $this->$variable$->store($request->validated());
        return redirect()->route('$name$s.index')->with('success', '$name$ created successfully.');
    }

    /**
     * Belirli bir kaynağı görüntülemek için kullanılır.
     *
     * @param  string $id
     * @return \Illuminate\View\View
     */
    public function show(string $id) : View
    {
        $data = $this->$variable$->show($id);
        return view('$name$s.show', compact('data'));
    }

    /**
     * Belirli bir kaynağı düzenleme formunu görüntülemek için kullanılır.
     *
     * @param  string $id
     * @return \Illuminate\View\View
     */
    public function edit(string $id) : View
    {
        $data = $this->$variable$->show($id);
        return view('$name$s.edit', compact('data'));
    }

    /**
     * Belirli bir kaynağı güncellemek için kullanılır.
     *
     * @param  $name$Request $request
     * @param  string $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function update($name$Request $request, string $id) : RedirectResponse
    {
        $this->$variable$->update($request->validated(), $id);
        return redirect()->route('$name$s.index')->with('success', '$name$ updated successfully.');
    }

    /**
     * Belirli bir kaynağı kaldırmak için kullanılır.
     *
     * @param  string $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy(string $id) : RedirectResponse
    {
        $this->$variable$->destroy($id);
        return redirect()->route('$name$s.index')->with('success', '$name$ deleted successfully.');
    }
}
